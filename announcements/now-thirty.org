* Introduction

  1. Emacspeak, started in September 1994, was released as Open
   Source in [[https://tvraman.github.io/emacspeak//web/releases/release-3.0.html][April 1995]].
  2. [[https://emacspeak.sourceforge.net/turning-twenty.html][Emacspeak At Twenty]]  was published in September 2014 to trace the
     evolution of the project.
  3. Now, this article gives a birds-eye overview of the last 10 years
     by following the logical structure of the afore-mentioned Turning-Twenty paper.
  4. In the process, we identify the dreams that have come to pass as
     well as the expectations that have failed to  materialize because
     of developments in the larger  Internet eco-system we live in.
  5. But never fear, though in the short-term, some of the above might be superficially
     disappointing, they likely herald the nature of bigger and better
     things to come in the long-term.
  6. As a proof-point, in 1994, I could not have imagined the impact
     that the world of Internet-centric computing and the accompanying
     information revolution has had on the state of information
     access.
  7. Share And Enjoy --- [[https://tvraman.github.io/emacspeak/web/01-gemini.ogg ][The Best Is Yet To Come]]!


** How To Read This Document

  1. I recommend reading the /Turning Twenty/ paper to get a full overview.
  2. Then, read this paper a section at a time, while refering back to
     the parallel section in the /Turning Twenty/ paper to understand
     how things have evolved.
  3. Make sure to skim or deep-dive into the references in both papers.
  

*  Using UNIX With Speech Output —  2024

  1. In 2024, Unix equates mostly to various Linux distros, and from
    the Emacspeak perspective, they are all made /mostly/ equal.
  2. Variations do exist and  running bleeding-edge distros can come
     with issues, e.g., unstable versions of the underlying audio infrastructure.
  3. Yes, 30 years and counting, Linux Audio is still a work in
     progress though I hope Pipewire will be the last of these tidal shifts.
  4. Linux is moving to Wayland from X and expect that transition to
     be choppy.
  5. As with other platforms, /native apps/ are mostly gone bar the
     shouting; in that context, where the majority of users use most
     things through a /mainstream/ Web browser, Emacspeak users access
     /everything/ through Emacs.
  6. The above when things are done right is hugely empowering and
     enabling; when done badly, it's hugely disabling --- see later
     sections of this paper on  the continuing evolution of the Web.
     
* Key Enabler — Emacs And Lisp Advice

  1. Advice in Emacs as implemented in ~advice.el~ is rock-solid.
  2. There is a newer /nadvice/ that is part of Emacs; Emacspeak does
     not use it.
  3. There are no plans to migrate to /nadvice/ since that is a lot of
     busy work in my view and any such migration would be difficult
     to test for correctness.
  4. The classic /advice/ package may be removed from Emacs at some
     point in the future, but never fear; it'll be bundled with
     Emacspeak if that becomes necessary. This is a feature of Free Software and is a great
     example of what that /Freedom/ means.
     
* Key Component —  Text To Speech (TTS)

  1. Speech output --- especially unencumbered text-to-speech is just
    as much a challenge as it was 30 years ago.
  2. Things appear to be coming full circle, Emacspeak started with
     the hardware Dectalk; now, the [[https://github.com/dectalk/dectalk.git][Software Dectalk]] is increasingly
     becoming the primary choice on Linux.
  3. Viavoice Outloud from Voxin is still supported (since 1999) but
     you can no longer buy new licenses; if you have a licence, it'll
     continue to work.
  4. The  Vocalizer voices that Voxin now sells /do not/ work with Emacspeak.
  5. The  other choice on Linux is ESpeak which will hopefully
     continue to be free -- albeit of much lower quality.
  6. The future as ever is unpredictable and new voices may well show
     up --- especially those powered by on-device LLMs as that
     technology progresses.
  7. On non-free platforms, there is usable TTS on the Mac, now
     supported by the new SwiftMac server for Emacspeak.
     
* Emacspeak And Software Development

  1. /Magit/  as a Git porcelain is perhaps the biggest leap forward
   with respect to software development  on Emacs.
  2. New completion frameworks such as /company/ and /consult/ come a
     close second in enhancing productivity.
  3. Packages like /transient/ that enable rapid keyboard access to
     complex nested-menu driven interfaces.
  4. Various plugin-in completion strategies such as /fuzzy/ and
     /flex/ for enhanced completion.
  5. IPython notebooks and their generalization to /Julia/, /Python/
     and /R/. The news here isn't all good; IPython notebooks are
     well-designed with respect to not getting locked into any given
     implementation. However in practice, all such environments depend
     on Javascript for interaction from within the browser. Today,
     many of Emacs' supporting environments for IPython Notebooks
     e.g., package ~ein~ are no longer maintained for this reason; hopefully there
     will be a new crop of packages to come in the future.
  6. Note that developing in languages like Python (~elpy~), ~R~,
     ~Clojure~ (~cider~), ~Scheme~, ~Racket~,  ~Ruby~ and numerous
     other high-level languages continues to be very well supported in Emacs.
  7. The re-emergence of Common Lisp in the last 20 years, thanks to
     ~asdf~ as a network-aware package management and build tool has
     once again made Lisp development using Emacs ~Slime~ a productive
     experience; as an example, I updated [[https://emacspeak.blogspot.com/2022/12/aster-spoken-math-on-emacspeak-audio_21.html][Audio System For Technical
     Readings (AsTeR)]]--- my PhD project from 1993 --- to run under ~SBCL~
     with a freshly implemented Emacs front-end in late 2022.
  8. [[https://emacspeak.blogspot.com/2023/09/emacs-ergonomics-dont-punish-your.html][Ergonomic keybindings]] under ~X~ using ~xcape~ to minimize
     chording has been  a significant win in the last two years.
     
     
* Emacspeak And Authoring Documents

  1. Package ~org~ are to authoring as ~magit~ is to
    software development with respect  to productivity gained.
  2. ~Org~ has existed since approx 2006 in my Emacs setup; but it
     continues to give and give plentifully.
  3. Where I once authored technical papers in LaTeX using ~auctex~,
     used ~nxml~ for
     XML/HTML,  etc., I now mostly write everything in ~org-mode~ and export
     to the relevant target format.
  4. Integrating various search engines  in Emacs, with ~eww~
     providing  a consistent Emacs experience makes authoring content
      on the Emacspeak desktop extremely productive.
  5. Integrated access to dictionaries, translation engines, and other
     language tools combine for a powerful authoring work-bench.
     
     
* Emacspeak  And The Web In 2024


  1. Package ~shr~ and ~eww~ arrived around 2014. But in 2024, they
    can be said to have *really* landed.

  2. The explicit take-over of stewardship of the Web from the W3C in
     the last decade by the browser vendors --- I say explicit because
     the W3C had already thrown in the towl in the preceeding decade.
  3. This  has led to a Web of content  created using the assembly
     language of divs, spans and JS --- under the flag of HTML5.

  4. For better or worse, the investment in XML and display-independent
     content is now a complete loss at least on the surface.
  5. I say /on the surface/ above ---The welcome re-emergence of
     ~ATOM~ and ~RSS~ feeds is perhaps a silent acknowledgement that
     bloated Web pages are now unusable even for users who can see.
  6. On the Emacspeak desktop,  package  ~elfeed~
     has emerged as  a powerful feed-manager for Emacs.
  7. Emacspeak had already implemented ~RSS~ and ~ATOM~ support using
     ~XSLT~; but those features now shine even more with mainstream
     content sites reviving their support for content feeds.
  8. Browsers like Mozilla now implement /content filters/ --- a
     euphamism for removing visual eye-candy and related cruft to
     reveal the underlying content; recently these have now become
     available as callable plugins, something that Emacspeak now
     leverages to make the Web more readable.
  9. Package ~url-template~ and ~emacspeak-websearch~ continue to give
     in plenty, though they do require continuous updating.
  10. Web APIs come and go, usually  last for a few years, so in some
      sense that space is in steady state but contantly changing.
  11. The state of WebApps is perhaps the most concerning from an
      Emacspeak perspective, and I dont see that changing in the
      short-term since there are no incentives for Web providers to
      free their applications from the tangled Web they have woven
      around themselves. But as with everything else in our industry,
      it is when something feels completely entrenched that users
      rebel and innovation occurs to move us to the next phase --- so
      fingers crossed.
  12. Emacspeak support for rich multimedia is now much  more robust,
      see the next section.

* Audio Formatting —  Generalizing Aural CSS
  1. Audio formatting with Aural CSS support is stable, with
    enhancements with respect to supporting more TTS engines.
  2. Support for parallel streams of TTS using separate outputs to
     left/right channels is a big win and enables more efficient interaction.
  3. Support for various DSP filters makes Emacspeak a rich auditory environment.
  4. Soundscapes implemented via package ~boodler~ makes for  a
     pleasant and relaxing auditory environment.
  5. Enabling virtual sound devices via Pipewire for 5.1  and 7.1
     audio significantly enhances the environment.

     
* Conversational Gestures For The Audio Desktop

  1.  Parallel streams of audio, combined with more ergonomic
     keybindings are perhaps the only enhancement in this area.
     
* Accessing Media Streams

  1. First ~mplayer~ and now ~mpv~ signifcantly expand the
   multimedia streaming features of the Emacspeak desktop.
  2. Emacs package ~empv~ along with module ~emacspeak-empv~ is a
     powerful combination for locating, organizing  and playing local and remote
     media streams.
  3. This makes media streams from a large number of providers ranging
     from the BBC to Youtube available via a consistent keyboard interface.
  4. This experience is augmented by a collection of /smart/ content
     locators on the Emacspeak desktop, see the relevant blog article
     on the Emacspeak Blog.
     
* EBooks—   Ubiquitous Access To Books

  1. Module ~emacspeak-epub~ for Epub and ~emacspeak-bookshare~ for
    Bookshare continue to provide good EBook integration.
  2. There are  /smart/ book locators analogous to the locators for
     media content.
  3. Speech-enabled ~Calibre~ integration for working with  local
     Ebookse-books.
     
     
* Leveraging Computational Tools —  From SQL And R To IPython Notebooks

  1. This area continues to provide a rich collection of  packages.
  2. Newer highlights include ~sage~ interaction for symbolic computation.
  3. Integrates with packages like ~gptel~ and ~ellama~ for working
     with local and network LLMs.
  4. The afore-mentioned decline in IPython Notebooks presently limits
     the level of interaction possible with ~Colab~ notebooks,
     especially when working with remote LLMs that impose some type of
     proprietary auth-flow.
     
* Social Web  — EMail, Instant Messaging, Blogging  And Tweeting Using Open Protocols 
* The RESTful Web —  Web Wizards And URL Templates For Faster Access
* Mashing It Up —  Leveraging Evolving Web APIs
* Conclusion 
* References 

#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+title: 30 Years On: Emacspeak --- A Speech Odyssey
#+date: <2024-07-10 Wed>
#+author: T.V Raman
#+email: raman@google.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 31.0.50 (Org mode 9.7.6)
#+cite_export:
